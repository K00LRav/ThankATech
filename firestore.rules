rules_version = '2';

// Firestore Security Rules for ThankATech
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUsername(username) {
      return username.size() >= 3 
             && username.size() <= 20 
             && username.matches('^[a-z0-9_-]+$');
    }
    
    // Users collection - new unified structure
    match /users/{userId} {
      // Anyone authenticated can read user profiles (for browsing technicians)
      allow read: if isAuthenticated();
      
      // Users can create their own profile during registration
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can only update their own profile
      allow update: if isOwner(userId) 
                    && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['userType', 'authUid', 'uniqueId']))
                    && (request.resource.data.username == resource.data.username 
                        || isValidUsername(request.resource.data.username));
      
      // Users can soft-delete their own profile
      allow delete: if isOwner(userId);
    }
    
    // Technicians collection (legacy - for backward compatibility)
    match /technicians/{techId} {
      // Anyone authenticated can read technician profiles
      allow read: if isAuthenticated();
      
      // Technicians can create/update their own profile
      allow create, update: if isOwner(techId);
      
      // Technicians can delete their own profile
      allow delete: if isOwner(techId);
    }
    
    // Clients collection (legacy - for backward compatibility)
    match /clients/{clientId} {
      // Anyone authenticated can read client profiles
      allow read: if isAuthenticated();
      
      // Clients can create/update their own profile
      allow create, update: if isOwner(clientId);
      
      // Clients can delete their own profile
      allow delete: if isOwner(clientId);
    }
    
    // Thank Yous collection
    match /thankYous/{thankYouId} {
      // Anyone authenticated can read (for viewing thank you history)
      allow read: if isAuthenticated();
      
      // Only authenticated users can create thank yous
      // Validate that sender is the authenticated user
      allow create: if isAuthenticated() 
                    && request.resource.data.fromUserId == request.auth.uid
                    && request.resource.data.technicianId != request.auth.uid;  // Prevent self-thanking
      
      // No updates or deletes (thank yous are permanent)
      allow update, delete: if false;
    }
    
    // Tips collection
    match /tips/{tipId} {
      // Anyone authenticated can read their own tips
      allow read: if isAuthenticated() 
                  && (resource.data.customerId == request.auth.uid 
                      || resource.data.technicianId == request.auth.uid);
      
      // Only authenticated users can create tips
      // Validate that sender is the authenticated user
      allow create: if isAuthenticated() 
                    && request.resource.data.customerId == request.auth.uid
                    && request.resource.data.technicianId != request.auth.uid;  // Prevent self-tipping
      
      // No updates or deletes (tips are permanent)
      allow update, delete: if false;
    }
    
    // Token balances
    match /tokenBalances/{userId} {
      // Users can read their own balance
      allow read: if isOwner(userId);
      
      // System/server-side only can write
      allow write: if false;
    }
    
    // Token transactions
    match /tokenTransactions/{transactionId} {
      // Users can read transactions they're involved in
      allow read: if isAuthenticated() 
                  && (resource.data.fromUserId == request.auth.uid 
                      || resource.data.toUserId == request.auth.uid);
      
      // System/server-side only can write
      allow write: if false;
    }
    
    // Daily limits
    match /dailyThankYouLimits/{userId} {
      // Users can read their own limits
      allow read: if isOwner(userId);
      
      // Users can create/update their own limits
      allow create, update: if isOwner(userId);
      
      // Don't allow delete (keep history)
      allow delete: if false;
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
