rules_version = '2';

// ThankATech Firestore Security Rules - Production Ready
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // Clients collection
    match /clients/{clientId} {
      // Anyone authenticated can read basic client info (for displaying sender info)
      allow read: if isAuthenticated();
      
      // Users can create their own client profile
      allow create: if isAuthenticated() 
                    && request.auth.uid == resource.id
                    && request.resource.data.authUid == request.auth.uid
                    && isValidEmail(request.resource.data.email);
      
      // Users can only update their own client profile
      allow update: if isOwner(clientId) 
                    && request.resource.data.authUid == resource.data.authUid  // Can't change authUid
                    && request.resource.data.email == resource.data.email;     // Can't change email
      
      // Users can deactivate their own profile
      allow delete: if isOwner(clientId);
    }
    
    // Technicians collection
    match /technicians/{techId} {
      // Anyone authenticated can read technician profiles (for browsing)
      allow read: if isAuthenticated();
      
      // Users can create their own technician profile
      allow create: if isAuthenticated() 
                    && request.auth.uid == resource.id
                    && request.resource.data.authUid == request.auth.uid
                    && isValidEmail(request.resource.data.email);
      
      // Technicians can update their own profile (except sensitive fields)
      allow update: if isOwner(techId) 
                    && request.resource.data.authUid == resource.data.authUid     // Can't change authUid
                    && request.resource.data.email == resource.data.email        // Can't change email
                    && request.resource.data.totalThankYous == resource.data.totalThankYous; // Can't manually change counter
      
      // Technicians can deactivate their own profile
      allow delete: if isOwner(techId);
    }
    
    // Admins collection
    match /admins/{adminId} {
      // Only admins can read admin profiles
      allow read: if isAdmin();
      
      // Only existing admins can create new admin profiles
      allow create: if isAdmin();
      
      // Admins can update their own profile
      allow update: if isOwner(adminId) && isAdmin();
      
      // No deletion of admin profiles
      allow delete: if false;
    }
    
    // Token Transactions collection (main transaction log)
    match /tokenTransactions/{transactionId} {
      // Users can read transactions they're involved in
      allow read: if isAuthenticated() && 
                  (resource.data.fromUserId == request.auth.uid || 
                   resource.data.toTechnicianId == request.auth.uid);
      
      // Only authenticated users can create token transactions
      allow create: if isAuthenticated() 
                    && request.resource.data.fromUserId == request.auth.uid
                    && (request.resource.data.type == 'thank_you' || 
                        request.resource.data.type == 'toa' ||
                        request.resource.data.type == 'token_purchase')
                    && request.resource.data.tokens > 0
                    && request.resource.data.toTechnicianId != request.auth.uid; // Prevent self-transactions
      
      // Admins can read all transactions
      allow read: if isAdmin();
      
      // No updates or deletes (transactions are immutable)
      allow update, delete: if false;
    }
    
    // Token Balances collection (user balances)
    match /tokenBalances/{userId} {
      // Users can read their own balance
      allow read: if isOwner(userId);
      
      // Admins can read all balances
      allow read: if isAdmin();
      
      // Only server-side functions or admins can modify balances
      // This prevents direct manipulation of token counts
      allow write: if isAdmin();
    }
    
    // Email Logs collection (for debugging email issues)
    match /emailLogs/{logId} {
      // Users can read their own email logs
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins can read all email logs
      allow read: if isAdmin();
      
      // Only system can write email logs
      allow write: if false;
    }
    
    // Stripe Payments collection (payment records)
    match /stripePayments/{paymentId} {
      // Users can read their own payment records
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins can read all payment records
      allow read: if isAdmin();
      
      // Only system can write payment records (via webhooks)
      allow write: if false;
    }
    
    // System Logs collection (for debugging and monitoring)
    match /systemLogs/{logId} {
      // Only admins can read system logs
      allow read: if isAdmin();
      
      // Only system can write logs
      allow write: if false;
    }
    
    // Profile Photos in Storage (handled by storage.rules)
    // But we can track metadata here
    match /profilePhotoMetadata/{userId} {
      // Users can read/write their own photo metadata
      allow read, write: if isOwner(userId);
      
      // Admins can read all photo metadata
      allow read: if isAdmin();
    }
    
    // User Sessions (for security tracking)
    match /userSessions/{sessionId} {
      // Users can read their own sessions
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins can read all sessions
      allow read: if isAdmin();
      
      // System manages sessions
      allow write: if false;
    }
    
    // EXPLICIT DENY: All other collections are blocked by default
    // This prevents access to any undefined collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
